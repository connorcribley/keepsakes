// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  listings Listing[]
  reviews  Review[]

  sentMessages     DirectMessage[] @relation("SentMessages")
  receivedMessages DirectMessage[] @relation("ReceivedMessages")

  conversationsAsParticipant1 Conversation[] @relation("Conversation1")
  conversationsAsParticipant2 Conversation[] @relation("Conversation2")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Listing {
  id          String @id @default(cuid())
  title       String
  image       String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime @default(dbgenerated("(now() + interval '7 days')"))

  location Unsupported("geometry")

  items   Item[]
  reviews Review[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Item {
  id          String @id @default(cuid())
  title       String
  image       String
  description String

  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Review {
  id          String  @id @default(cuid())
  title       String
  image       String?
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DirectMessage {
  id            String    @id @default(cuid())
  content       String
  readAt        DateTime?
  attachmentUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId       String
  recipientId    String
  conversationId String

  sender       User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipient    User         @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  participant1Id String
  participant2Id String

  participant1 User @relation("Conversation1", fields: [participant1Id], references: [id], onDelete: Cascade)
  participant2 User @relation("Conversation2", fields: [participant2Id], references: [id], onDelete: Cascade)

  messages DirectMessage[]
}
